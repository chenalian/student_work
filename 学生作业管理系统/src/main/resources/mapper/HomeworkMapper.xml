<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="alian.mapper.HomeworkMapper">
  <resultMap id="BaseResultMap" type="alian.domain.Homework">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="class_id" jdbcType="INTEGER" property="classId" />
    <result column="stime" jdbcType="TIMESTAMP" property="stime" />
    <result column="etime" jdbcType="TIMESTAMP" property="etime" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="filename" jdbcType="VARCHAR" property="filename" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="alian.domain.Homework">
    <result column="text" jdbcType="LONGVARCHAR" property="text" />
  </resultMap>
  <sql id="Base_Column_List">
    id, class_id, stime, etime, type, filename, state
  </sql>
  <sql id="Blob_Column_List">
    text
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from homework
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from homework
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="alian.domain.Homework">
    insert into homework (id, class_id, stime, 
      etime, type, filename, 
      state, text)
    values (#{id,jdbcType=INTEGER}, #{classId,jdbcType=INTEGER}, #{stime,jdbcType=TIMESTAMP}, 
      #{etime,jdbcType=TIMESTAMP}, #{type,jdbcType=INTEGER}, #{filename,jdbcType=VARCHAR}, 
      #{state,jdbcType=INTEGER}, #{text,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="alian.domain.Homework">
    insert into homework
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="classId != null">
        class_id,
      </if>
      <if test="stime != null">
        stime,
      </if>
      <if test="etime != null">
        etime,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="filename != null">
        filename,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="text != null">
        text,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="classId != null">
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="stime != null">
        #{stime,jdbcType=TIMESTAMP},
      </if>
      <if test="etime != null">
        #{etime,jdbcType=TIMESTAMP},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="filename != null">
        #{filename,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="text != null">
        #{text,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="alian.domain.Homework">
    update homework
    <set>
      <if test="classId != null">
        class_id = #{classId,jdbcType=INTEGER},
      </if>
      <if test="stime != null">
        stime = #{stime,jdbcType=TIMESTAMP},
      </if>
      <if test="etime != null">
        etime = #{etime,jdbcType=TIMESTAMP},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="filename != null">
        filename = #{filename,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="text != null">
        text = #{text,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="alian.domain.Homework">
    update homework
    set class_id = #{classId,jdbcType=INTEGER},
      stime = #{stime,jdbcType=TIMESTAMP},
      etime = #{etime,jdbcType=TIMESTAMP},
      type = #{type,jdbcType=INTEGER},
      filename = #{filename,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      text = #{text,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="alian.domain.Homework">
    update homework
    set class_id = #{classId,jdbcType=INTEGER},
      stime = #{stime,jdbcType=TIMESTAMP},
      etime = #{etime,jdbcType=TIMESTAMP},
      type = #{type,jdbcType=INTEGER},
      filename = #{filename,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="insertHomework_returnKey" useGeneratedKeys="true" keyProperty="id" parameterType="alian.domain.Homework" >
        insert into homework ( id,class_id, stime,
      etime, type, filename,
      state, text)
    values (#{id,jdbcType=INTEGER},#{classId,jdbcType=INTEGER}, #{stime,jdbcType=TIMESTAMP},
      #{etime,jdbcType=TIMESTAMP}, #{type,jdbcType=INTEGER}, #{filename,jdbcType=VARCHAR},
      #{state,jdbcType=INTEGER}, #{text,jdbcType=LONGVARCHAR})
  </insert>

  <update id="changePublishHomework" parameterType="alian.domain.Homework">
      update
      homework
      set
      etime = #{etime,jdbcType=TIMESTAMP},
      filename = #{filename,jdbcType=VARCHAR},
      text = #{text,jdbcType=LONGVARCHAR}
      where id=#{id,jdbcType=INTEGER}
  </update>

  <!--# keyProperty = id，会将值绑定到User对象的id属性上，然后再使用 #{id}从对象中取值-->
  <!--# order=BEFORE，先执行selectKey语句-->
  <!--<insert id="insertHomework_returnKey" parameterType="alian.domain.Homework">-->
    <!--<selectKey keyProperty="id" resultType="Integer" order="BEFORE">-->
      <!--select replace(uuid(), '-', '') as id from dual-->
    <!--</selectKey>-->
        <!--insert into homework (id, class_id, stime,-->
        <!--etime, type, filename,-->
        <!--state, text)-->
        <!--values (#{id}, #{classId}, #{stime},-->
        <!--#{etime}, #{type}, #{filename},-->
        <!--#{state}, #{text})-->
  <!--</insert>-->
</mapper>